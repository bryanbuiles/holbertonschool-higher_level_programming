"""
    Mylist module test


"""



>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Proving area function:
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Basic usage:
    >>> bg.integer_validator("bryan", 97)

negative input:
    >>> bg.integer_validator("bryan", -2)
    Traceback (most recent call last):
    ...
    ValueError: bryan must be greater than 0

infinity input:
    >>> bg.integer_validator("bryan", float("inf"))
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

non int input:
    >>> bg.integer_validator("bryan", "superhero")
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

Function integer_validator large int input usage:
    >>> bg.integer_validator("holberton", 9999999999999999999999999)

zero input:
    >>> bg.integer_validator("hello", 0)
    Traceback (most recent call last):
    ...
    ValueError: hello must be greater than 0

float input:
    >>> bg.integer_validator("bryan", 90.8)
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

no input:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

one input:
    >>> bg.integer_validator("bryan")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

list input:
    >>> bg.integer_validator("bryan", [90])
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

nan input:
    >>> bg.integer_validator("bryan", float('nan'))
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

None input:
    >>> bg.integer_validator("bryan", None)
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

Tuple input:
    >>> bg.integer_validator("bryan", (8, 2))
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

bool input:
    >>> bg.integer_validator("bryan", True)
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

Dict input:
    >>> bg.integer_validator("bryan", {"brand": "Ford"})
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

set input:
    >>> bg.integer_validator("bryan", {1, 2})
    Traceback (most recent call last):
    ...
    TypeError: bryan must be an integer

>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

>>> try:
...     bg.integer_validator("Hello", -1)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] Hello must be greater than 0
>>> try:
...     bg.integer_validator("bryan", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] bryan must be greater than 0
>>> try:
...     bg.integer_validator("Hello", "omg")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] Hello must be an integer

